{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Flightpath is an xDS server that can configure Envoy to act as an Edge proxy for Consul Connect enabled services. Flightpath registers itself in Consul Catalog as a Connect Native service and uses its own TLS certificate to configure routing in Envoy. Using these certificates Envoy can communicate with Connect Sidecars as if the connection was initiated by Flightpath. Flightpath can be compared with Fabio or Traefik but it is not a proxy in itself. While both Fabio and Traefik manage cluster discovery and traffic routing themselves, Flightpath is only responsible for discovering the routing information from consul catalog and configuring Envoy to route the traffic.","title":"Introduction"},{"location":"#introduction","text":"Flightpath is an xDS server that can configure Envoy to act as an Edge proxy for Consul Connect enabled services. Flightpath registers itself in Consul Catalog as a Connect Native service and uses its own TLS certificate to configure routing in Envoy. Using these certificates Envoy can communicate with Connect Sidecars as if the connection was initiated by Flightpath. Flightpath can be compared with Fabio or Traefik but it is not a proxy in itself. While both Fabio and Traefik manage cluster discovery and traffic routing themselves, Flightpath is only responsible for discovering the routing information from consul catalog and configuring Envoy to route the traffic.","title":"Introduction"},{"location":"configuration/","text":"Configuration \u00b6 Flightpath has several configuration options you might want to tweak to get it working in your specific environment. Option Description -consul.host Network address to a consul agent -consul.port Port on which the consul agent is listening -consul.proto Protocol used to connect with consul agent -consul.token Consul token to use -debug Start debug HTTP server on loopback interface -debug.port Network port to use for debug HTTP server -dogstatsd Enable publishing metrics to dogstatsd agent -dogstatsd.addr Address of the dogstatsd agent -dogstatsd.namespace Metrics namespace for dogstatsd -dogstatsd.port Port of the dogstatsd agent -node-name Named of the Envoy node -envoy.access-logs Path to the file where envoy will write listener access logs -envoy.listen.port Port used by Envoy Listener -log.format Format of the log message. Valid options are json and plain -log.level Set log verbosity. Valid options are trace, debug, error, warn, info, fatal and panic -name Name used to register the flightpath service in Consul Catalog -port Port for XDS listener -version Show version information Flightpath primarily provides configuration to Envoy and the Envoy XDS protocol requires some information to be shared between Envoy and the XDS server. We will use the following envoy configuration for reference: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 node : id : flightpath-edge cluster : flightpath static_resources : clusters : - name : xds_cluster connect_timeout : 0.25s type : STATIC lb_policy : ROUND_ROBIN http2_protocol_options : {} upstream_connection_options : tcp_keepalive : {} load_assignment : cluster_name : xds_cluster endpoints : - lb_endpoints : - endpoint : address : socket_address : address : 127.0.0.1 port_value : 7171 dynamic_resources : lds_config : api_config_source : api_type : GRPC grpc_services : envoy_grpc : cluster_name : xds_cluster cds_config : api_config_source : api_type : GRPC grpc_services : envoy_grpc : cluster_name : xds_cluster You can copy this configuration, or if you want you can also download the internal/envoy-config.yaml file from github. Understanding Envoy Config \u00b6 If you are not familiar with Envoy configuration then you should head over to the official envoy documentation and at least get an understanding of the basic building blocks. This configuration declares that the envoy process is running as node flightpath-edge in cluster flightpath . This information is presented to Flightpath when envoy tries to gather the configuration 1 . There is also a static cluster registered with name xds_cluster and address 127.0.0.1:7171 , this is the network address where envoy will try to reach the XDS server. Rest of the configuration declares that the network listener and the upstream clusters can be discovered from xds_cluster . This is just enough configuration for Envoy to be able to make connection with Flightpath and ask for more configuration If you start Envoy with this configuration it will attempt to connect with an XDS server on 127.0.0.1:7171 . At this point Envoy has not started a network listener so it is unable to accept any request. Now start Flightpath and you should see in Envoy logs that it has connected with the XDS server and loaded listener configuration. Understanding Flightpath Config \u00b6 At this point if you have both the Flightpath and Envoy running you have a reasonably functional setup that can discover services from consul catalog and route network traffic to them. This is because Envoy configuration we used in previous section uses the default values chosen by Flightpath. Default configuration is helpful to get up and running quickly but in a production like environment you might want to change things a little and that is where it becomes necessary to understand how a configuration option in Flightpath maps to that of Envoy. The most critical configuration options available in Flightpath are Option Description -node-name Named of the Envoy node -envoy.listen.port Port used by Envoy Listener -envoy.access-logs Path to the file where envoy will write listener access logs -node-name This option directly maps to the node name set in Envoy configuration. Envoy presents this value to the XDS server and the server returns the configuration specifically tailored for the node with this name. How you choose this name depends very much on your Flightpath deployment. If you are running Flightpath on the same machine as Envoy then you can use the hostname of the machine to represent the node name. If you have Flightpath deployed as a seperate cluster from Envoy then you might want to choose a name that best describes the role of Envoy cluster, e.g. public-us-east-1, public-eu-central-1 etc. In this case you want to make sure that all Envoy processes that connect to the same Flightpath cluster are configured to use the same node name or they won't receive any configuration and therefore won't be able to serve traffic. -envoy.listen.port This is the network port Envoy is expected to use for its listener. This is configured in Flightpath because Envoy relies on Flightpath for listener discovery as well. You can add other static listeners as part of the Envoy configuration but consul based service discovery and routing will only work on this listener. -envoy.access-logs This is the absolute path to the location where you want Envoy to write access logs. This is set in Flightpath because this is configured on the listener and Flightpath configures the listener on Envoy. You can set this to /dev/stdout or /dev/stderr if you want the logs to go to standard devices but keep in mind that if you run Envoy as a systemd service you won't be able to stream to stdout or stderr. Apart from these configuration options there are things that Flightpath chooses to set on Envoy with no way to override them. This is only a problem in short term while things are being changed and shuffled around. A later version of Flightpath will provide methods to configure every aspect of Envoy. See Envoy Node Configuration for details \u21a9","title":"Configuration"},{"location":"configuration/#configuration","text":"Flightpath has several configuration options you might want to tweak to get it working in your specific environment. Option Description -consul.host Network address to a consul agent -consul.port Port on which the consul agent is listening -consul.proto Protocol used to connect with consul agent -consul.token Consul token to use -debug Start debug HTTP server on loopback interface -debug.port Network port to use for debug HTTP server -dogstatsd Enable publishing metrics to dogstatsd agent -dogstatsd.addr Address of the dogstatsd agent -dogstatsd.namespace Metrics namespace for dogstatsd -dogstatsd.port Port of the dogstatsd agent -node-name Named of the Envoy node -envoy.access-logs Path to the file where envoy will write listener access logs -envoy.listen.port Port used by Envoy Listener -log.format Format of the log message. Valid options are json and plain -log.level Set log verbosity. Valid options are trace, debug, error, warn, info, fatal and panic -name Name used to register the flightpath service in Consul Catalog -port Port for XDS listener -version Show version information Flightpath primarily provides configuration to Envoy and the Envoy XDS protocol requires some information to be shared between Envoy and the XDS server. We will use the following envoy configuration for reference: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 node : id : flightpath-edge cluster : flightpath static_resources : clusters : - name : xds_cluster connect_timeout : 0.25s type : STATIC lb_policy : ROUND_ROBIN http2_protocol_options : {} upstream_connection_options : tcp_keepalive : {} load_assignment : cluster_name : xds_cluster endpoints : - lb_endpoints : - endpoint : address : socket_address : address : 127.0.0.1 port_value : 7171 dynamic_resources : lds_config : api_config_source : api_type : GRPC grpc_services : envoy_grpc : cluster_name : xds_cluster cds_config : api_config_source : api_type : GRPC grpc_services : envoy_grpc : cluster_name : xds_cluster You can copy this configuration, or if you want you can also download the internal/envoy-config.yaml file from github.","title":"Configuration"},{"location":"configuration/#understanding-envoy-config","text":"If you are not familiar with Envoy configuration then you should head over to the official envoy documentation and at least get an understanding of the basic building blocks. This configuration declares that the envoy process is running as node flightpath-edge in cluster flightpath . This information is presented to Flightpath when envoy tries to gather the configuration 1 . There is also a static cluster registered with name xds_cluster and address 127.0.0.1:7171 , this is the network address where envoy will try to reach the XDS server. Rest of the configuration declares that the network listener and the upstream clusters can be discovered from xds_cluster . This is just enough configuration for Envoy to be able to make connection with Flightpath and ask for more configuration If you start Envoy with this configuration it will attempt to connect with an XDS server on 127.0.0.1:7171 . At this point Envoy has not started a network listener so it is unable to accept any request. Now start Flightpath and you should see in Envoy logs that it has connected with the XDS server and loaded listener configuration.","title":"Understanding Envoy Config"},{"location":"configuration/#understanding-flightpath-config","text":"At this point if you have both the Flightpath and Envoy running you have a reasonably functional setup that can discover services from consul catalog and route network traffic to them. This is because Envoy configuration we used in previous section uses the default values chosen by Flightpath. Default configuration is helpful to get up and running quickly but in a production like environment you might want to change things a little and that is where it becomes necessary to understand how a configuration option in Flightpath maps to that of Envoy. The most critical configuration options available in Flightpath are Option Description -node-name Named of the Envoy node -envoy.listen.port Port used by Envoy Listener -envoy.access-logs Path to the file where envoy will write listener access logs -node-name This option directly maps to the node name set in Envoy configuration. Envoy presents this value to the XDS server and the server returns the configuration specifically tailored for the node with this name. How you choose this name depends very much on your Flightpath deployment. If you are running Flightpath on the same machine as Envoy then you can use the hostname of the machine to represent the node name. If you have Flightpath deployed as a seperate cluster from Envoy then you might want to choose a name that best describes the role of Envoy cluster, e.g. public-us-east-1, public-eu-central-1 etc. In this case you want to make sure that all Envoy processes that connect to the same Flightpath cluster are configured to use the same node name or they won't receive any configuration and therefore won't be able to serve traffic. -envoy.listen.port This is the network port Envoy is expected to use for its listener. This is configured in Flightpath because Envoy relies on Flightpath for listener discovery as well. You can add other static listeners as part of the Envoy configuration but consul based service discovery and routing will only work on this listener. -envoy.access-logs This is the absolute path to the location where you want Envoy to write access logs. This is set in Flightpath because this is configured on the listener and Flightpath configures the listener on Envoy. You can set this to /dev/stdout or /dev/stderr if you want the logs to go to standard devices but keep in mind that if you run Envoy as a systemd service you won't be able to stream to stdout or stderr. Apart from these configuration options there are things that Flightpath chooses to set on Envoy with no way to override them. This is only a problem in short term while things are being changed and shuffled around. A later version of Flightpath will provide methods to configure every aspect of Envoy. See Envoy Node Configuration for details \u21a9","title":"Understanding Flightpath Config"},{"location":"error-messages/","text":"Error Messages \u00b6 Following is a list of all errors that can be raised by Flightpath. Warning This list should only be used as a reference document. The goal of this list is not to provide accurate debugging information but merely to point you towards a potential cause of the error. You should always check logs for error attribute which contains the original error raised by the underlying component. Global Scope \u00b6 failed to initialize metrics subsystem Flightpath failed to initialize the metrics backend. It is possible that the metrics sink is not listening on specified port or Flightpath does not have sufficient permissions on socket file. Catalog Subsystem \u00b6 failed to fetch list of services from consul catalog Flightpath failed to list all services currently presently registered in consul catalog. The most likely reason is a network problem or a disbanded consul quorum. If consul ACLs are in effect then the permissions on Flightpath token should also be reviewed. failed to filter connect target services Flightpath failed to tell sidecar proxies from main services. The most likely reason is a network problem or a disbanded consul quorum. If consul ACLs are in effect then the permissions on Flightpath token should also be reviewed. failed to fetch service definition Flightpath failed to read the service definition from consul catalog. The most likely reason is a network problem or a disbanded consul quorum. If consul ACLs are in effect then the permissions on Flightpath token should also be reviewed. failed to fetch TLS leaf certificates Flightpath failed to read the service definition from consul catalog. The most likely reason is a network problem or a disbanded consul quorum. If consul ACLs are in effect then the permissions on Flightpath token should also be reviewed. Discovery Subsystem \u00b6 GRPC server failed Bug The xDS gRPC server has shut down with an error. Flightpath may not have sufficient permissions to bind to the port configured for xDS. Click here to report the bug failed to deregister the service from consul catalog Flightpath failed to deregister itself from consul catalog. The most likely reason is a network problem or a disbanded consul quorum. If consul ACLs are in effect then the permissions on Flightpath token should also be reviewed. failed to stop the socket listener Bug The network listener for xDS has failed to stop. The attempt to close the listener may have been made before the listener could start listening on the network port or it may have already been closed. Click here to report the bug failed to update cluster information Bug Flightpath failed to build Envoy configuration or the configuration was built incorrectly. Click here to report the bug debug http server crashed Flightpath may not have sufficient permissions to bing to the port configured for the debug server failed to retrieve snapshot from XDS cache Bug Debug server failed to retrieve the active configuration from XDS server Click here to report the bug Metrics Subsystem \u00b6 failed to report Gauge metrics The metrics subsystem failed to push metrics to the backend. Most likely reason is an unresponsive agent or network problem. failed to report Increment metrics The metrics subsystem failed to push metrics to the backend. Most likely reason is an unresponsive agent or network problem.","title":"Error Messages"},{"location":"error-messages/#error-messages","text":"Following is a list of all errors that can be raised by Flightpath. Warning This list should only be used as a reference document. The goal of this list is not to provide accurate debugging information but merely to point you towards a potential cause of the error. You should always check logs for error attribute which contains the original error raised by the underlying component.","title":"Error Messages"},{"location":"error-messages/#global-scope","text":"failed to initialize metrics subsystem Flightpath failed to initialize the metrics backend. It is possible that the metrics sink is not listening on specified port or Flightpath does not have sufficient permissions on socket file.","title":"Global Scope"},{"location":"error-messages/#catalog-subsystem","text":"failed to fetch list of services from consul catalog Flightpath failed to list all services currently presently registered in consul catalog. The most likely reason is a network problem or a disbanded consul quorum. If consul ACLs are in effect then the permissions on Flightpath token should also be reviewed. failed to filter connect target services Flightpath failed to tell sidecar proxies from main services. The most likely reason is a network problem or a disbanded consul quorum. If consul ACLs are in effect then the permissions on Flightpath token should also be reviewed. failed to fetch service definition Flightpath failed to read the service definition from consul catalog. The most likely reason is a network problem or a disbanded consul quorum. If consul ACLs are in effect then the permissions on Flightpath token should also be reviewed. failed to fetch TLS leaf certificates Flightpath failed to read the service definition from consul catalog. The most likely reason is a network problem or a disbanded consul quorum. If consul ACLs are in effect then the permissions on Flightpath token should also be reviewed.","title":"Catalog Subsystem"},{"location":"error-messages/#discovery-subsystem","text":"GRPC server failed Bug The xDS gRPC server has shut down with an error. Flightpath may not have sufficient permissions to bind to the port configured for xDS. Click here to report the bug failed to deregister the service from consul catalog Flightpath failed to deregister itself from consul catalog. The most likely reason is a network problem or a disbanded consul quorum. If consul ACLs are in effect then the permissions on Flightpath token should also be reviewed. failed to stop the socket listener Bug The network listener for xDS has failed to stop. The attempt to close the listener may have been made before the listener could start listening on the network port or it may have already been closed. Click here to report the bug failed to update cluster information Bug Flightpath failed to build Envoy configuration or the configuration was built incorrectly. Click here to report the bug debug http server crashed Flightpath may not have sufficient permissions to bing to the port configured for the debug server failed to retrieve snapshot from XDS cache Bug Debug server failed to retrieve the active configuration from XDS server Click here to report the bug","title":"Discovery Subsystem"},{"location":"error-messages/#metrics-subsystem","text":"failed to report Gauge metrics The metrics subsystem failed to push metrics to the backend. Most likely reason is an unresponsive agent or network problem. failed to report Increment metrics The metrics subsystem failed to push metrics to the backend. Most likely reason is an unresponsive agent or network problem.","title":"Metrics Subsystem"},{"location":"getting-started/","text":"Getting Started \u00b6 There are several ways to install Flightpath. Docker Image Executable Binary Building From Source Installation \u00b6 Docker Image \u00b6 Docker images are available for each release, you can pull the image for any tag using 1 2 # pull the image for release tag 1.2.3 docker pull gufran/flightpath:1.2.3 or you can also pull an image built from the head of master branch using latest tag. It is not recommended to use latest docker image in production since the master branch is not guaranteed to be stable or even in a working state. Caution Always use a specific release tag in production. The latest docker image always contains the most recent commits to master branch and expected to be highly unstable. Executable Binary \u00b6 Executable binaries can be downloaded from Github Releases page. Note that only a tagged release is available for download from the release page. There are unstable binaries that are built from master branch and can be downloaded from Github Actions Artifacts page. Simply select the build you want and download the binaries. Info Executable binaries are only available for Linux, MacOS and Windows operating systems with AMD64 architecture. If you want to run Flightpath on other OS or CPU architecture you should consider building from source. Building From Source \u00b6 To build from source you need to have Golang v1.13 or better installed on your machine. You can build Flightpath using 1 go get github.com/Gufran/flightpath Binary built with go get will not have the build metadata embedded in it. If you care for build metadata then you should build with following command: 1 2 3 git clone https://github.com/Gufran/flightpath.git cd flightpath bash build.sh #-> will build ./flightpath Test Flight \u00b6 Flightpath depends on Consul Catalog to generate Envoy configuration. You are going to need Consul version 1.6 or better and Envoy version 1.12 or better installed before you can run Flightpath. Caution A docker based setup does not work properly on OSX because Docker on OSX runs on a virtualized linux host. This added layer of virtualization causes network problems in both bridged and host mode. It is possible to make it work on OSX with some effort but for now Docker is not involved. The quick start script uses http-echo to run a simple web server. You can pull it with go get : 1 go get github.com/hashicorp/http-echo On OSX you can install Consul and Envoy using Homebrew 1 brew install consul envoy Once you've ensured the dependencies you can use internal/testflight.sh script to spin up an environment with following components: Consul agent HTTP service without connect sidecar HTTP service with connect sidecar Flightpath Envoy At this point you should have the address of consul UI and both the services printed in your terminal. If you go to the Consul UI you should see the web services and flightpath registered in the catalog. You can now navigate to Service Without Connect or Service With Connect and be greeted with the static text response from http-echo service. Feel free to browse around in Consul UI or read the internal/testflight.sh script to get an understanding of what is going on.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"There are several ways to install Flightpath. Docker Image Executable Binary Building From Source","title":"Getting Started"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#docker-image","text":"Docker images are available for each release, you can pull the image for any tag using 1 2 # pull the image for release tag 1.2.3 docker pull gufran/flightpath:1.2.3 or you can also pull an image built from the head of master branch using latest tag. It is not recommended to use latest docker image in production since the master branch is not guaranteed to be stable or even in a working state. Caution Always use a specific release tag in production. The latest docker image always contains the most recent commits to master branch and expected to be highly unstable.","title":"Docker Image"},{"location":"getting-started/#executable-binary","text":"Executable binaries can be downloaded from Github Releases page. Note that only a tagged release is available for download from the release page. There are unstable binaries that are built from master branch and can be downloaded from Github Actions Artifacts page. Simply select the build you want and download the binaries. Info Executable binaries are only available for Linux, MacOS and Windows operating systems with AMD64 architecture. If you want to run Flightpath on other OS or CPU architecture you should consider building from source.","title":"Executable Binary"},{"location":"getting-started/#building-from-source","text":"To build from source you need to have Golang v1.13 or better installed on your machine. You can build Flightpath using 1 go get github.com/Gufran/flightpath Binary built with go get will not have the build metadata embedded in it. If you care for build metadata then you should build with following command: 1 2 3 git clone https://github.com/Gufran/flightpath.git cd flightpath bash build.sh #-> will build ./flightpath","title":"Building From Source"},{"location":"getting-started/#test-flight","text":"Flightpath depends on Consul Catalog to generate Envoy configuration. You are going to need Consul version 1.6 or better and Envoy version 1.12 or better installed before you can run Flightpath. Caution A docker based setup does not work properly on OSX because Docker on OSX runs on a virtualized linux host. This added layer of virtualization causes network problems in both bridged and host mode. It is possible to make it work on OSX with some effort but for now Docker is not involved. The quick start script uses http-echo to run a simple web server. You can pull it with go get : 1 go get github.com/hashicorp/http-echo On OSX you can install Consul and Envoy using Homebrew 1 brew install consul envoy Once you've ensured the dependencies you can use internal/testflight.sh script to spin up an environment with following components: Consul agent HTTP service without connect sidecar HTTP service with connect sidecar Flightpath Envoy At this point you should have the address of consul UI and both the services printed in your terminal. If you go to the Consul UI you should see the web services and flightpath registered in the catalog. You can now navigate to Service Without Connect or Service With Connect and be greeted with the static text response from http-echo service. Feel free to browse around in Consul UI or read the internal/testflight.sh script to get an understanding of what is going on.","title":"Test Flight"},{"location":"observability/","text":"Observability \u00b6 Caution Observability is an evolving component of Flightpath. Right now Flightpath is capable of writing logs to stdout in KV and JSON format and metrics are exposed only for Dogstatsd backend. Configuring Metrics \u00b6 Metrics backend can be configured by starting flightpath with -dogstatsd command line parameter. The backend can be configured using -dogstatsd.* parameters. See Configuration for more details. Note A future version of Flightpath will provide more backends for metrics as well as the ability to expose traces. Exposed Metrics \u00b6 Cluster Discovery Metrics \u00b6 catalog.discovery.clusters.loop Counter type No Tags Incremented on every iteration of cluster watcher loop. A rapidly increasing value might indicate high activity in consul catalog or flapping consul quorum. catalog.discovery.clusters.error.fetch Counter type No Tags Incremented every time there is an error while attempting to fetch service definitions from consul catalog. It is recommended to raise alerts if this metric has a non-zero value. Check logs from catalog subsystem for details on the error. catalog.discovery.clusters.noop Counter type No Tags Incremented every time the catalog watcher returns without updates. catalog.discovery.clusters.candidate Gauge type No Tags Represents the number of services potentially eligible for Flightpath based routing. catalog.discovery.clusters.error.filter_connect Counter type No Tags Incremented if an error is encountered trying to filter out the connect target services that can only be reached via their sidecar. It is recommended to raise alert if this metric has a non zero value. Check logs from catalog subsystem for more details on the error. catalog.discovery.clusters.targets Gauge type No Tags Represents the number of services that have been selected for Flightpath based routing catalog.discovery.clusters.watchers Gauge type No tags Represents the number of active consul watcher. Each target service has one corresponding watcher catalog.discovery.clusters.watcher.new Counter type service: Name of the service being watched Incremented every time a new consul watcher is started catalog.discovery.clusters.watcher.closing Counter type service: Name of the service that was being watched Incremented every time a service watcher is shut down Service Discovery Metrics \u00b6 catalog.discovery.service.loop Counter type service: Name of the service being watched is_sidecar: Whether or not the service is a sidecar proxy Incremented on every interation of service watcher loop. A rapidly increasing value might indicate high activity in consul catalog or a flapping consul quorum. catalog.discovery.service.error.fetch Counter type service: Name of the service being watched is_sidecar: Whether or not the service is a sidecar proxy Incremented every time there is an error while attempting to fetch service definition from consul quorum It is recommended to raise alert if this metric has non-zero value. Check logs from catalog subsystem for details on the error. catalog.discovery.service.noop Counter type service: Name of the service being watched is_sidecar: Whether or not the service is a sidecar proxy Incremented every time the service watcher returns without updates. catalog.discovery.service.updated Counter type service: Name of the service being watched is_sidecar: Whether or not the service is a sidecar proxy Incremented every time the watched service is updated in catalog. TLS Discovery Metrics \u00b6 catalog.tls.loop Counter type No tags Incremented on every iteration of the TLS certificate watcher loop. A rapidly increasing value might indicate a flapping consul quorum. catalog.tls.error.fetch Counter type No tags Incremented every time there is an error while attempting to fetch TLS certificates It is recommended to raise alert if this metric has a non-zero value. Check logs from catalog subsystem for details on error. catalog.tls.noop Counter type No tags Incremented every time the TLS watcher returns without updates. catalog.tls.updated Counter type No tags Incremented every time the TLS certificate is updated. XDS Server Metrics \u00b6 discovery.sync.loop Counter type No tags Incremented on every iteration of configuration synchronization loop discovery.cluster.update Counter type cluster: Name of the cluster with updates Incremented every time there is an update available in a cluster discovery.tls.update Counter type No tags Incremented every time there is an updated available for leaf certificates discovery.cluster.cleanup Counter type No tags Incremented every time a cluster is removed from configuration discovery.cluster.flush Counter type No tags Incremented on periodic configuration flush discovery.cluster.batch_size Gauge type No tags Represents the number of clusters pushed down to the XDS server in an update discovery.cluster.error.flush Counter type No tags Incremented every time an error is encountered trying to push updates to the XDS server discovery.cache.put_ns Gauge type No tags Number of nanoseconds taken to push the updated to XDS server discovery.cache.put.clusters Gauge type No tags Number of cluster entries pushed to XDS server discovery.cache.put.endpoints Gauge type No tags Number of endpoint entries pushed to XDS server discovery.cache.put.routes Gauge type No tags Number of route entries pushed to XDS server discovery.cache.put.listener Gauge type No tags Number of listener entries pushed to XDS server","title":"Observability"},{"location":"observability/#observability","text":"Caution Observability is an evolving component of Flightpath. Right now Flightpath is capable of writing logs to stdout in KV and JSON format and metrics are exposed only for Dogstatsd backend.","title":"Observability"},{"location":"observability/#configuring-metrics","text":"Metrics backend can be configured by starting flightpath with -dogstatsd command line parameter. The backend can be configured using -dogstatsd.* parameters. See Configuration for more details. Note A future version of Flightpath will provide more backends for metrics as well as the ability to expose traces.","title":"Configuring Metrics"},{"location":"observability/#exposed-metrics","text":"","title":"Exposed Metrics"},{"location":"observability/#cluster-discovery-metrics","text":"catalog.discovery.clusters.loop Counter type No Tags Incremented on every iteration of cluster watcher loop. A rapidly increasing value might indicate high activity in consul catalog or flapping consul quorum. catalog.discovery.clusters.error.fetch Counter type No Tags Incremented every time there is an error while attempting to fetch service definitions from consul catalog. It is recommended to raise alerts if this metric has a non-zero value. Check logs from catalog subsystem for details on the error. catalog.discovery.clusters.noop Counter type No Tags Incremented every time the catalog watcher returns without updates. catalog.discovery.clusters.candidate Gauge type No Tags Represents the number of services potentially eligible for Flightpath based routing. catalog.discovery.clusters.error.filter_connect Counter type No Tags Incremented if an error is encountered trying to filter out the connect target services that can only be reached via their sidecar. It is recommended to raise alert if this metric has a non zero value. Check logs from catalog subsystem for more details on the error. catalog.discovery.clusters.targets Gauge type No Tags Represents the number of services that have been selected for Flightpath based routing catalog.discovery.clusters.watchers Gauge type No tags Represents the number of active consul watcher. Each target service has one corresponding watcher catalog.discovery.clusters.watcher.new Counter type service: Name of the service being watched Incremented every time a new consul watcher is started catalog.discovery.clusters.watcher.closing Counter type service: Name of the service that was being watched Incremented every time a service watcher is shut down","title":"Cluster Discovery Metrics"},{"location":"observability/#service-discovery-metrics","text":"catalog.discovery.service.loop Counter type service: Name of the service being watched is_sidecar: Whether or not the service is a sidecar proxy Incremented on every interation of service watcher loop. A rapidly increasing value might indicate high activity in consul catalog or a flapping consul quorum. catalog.discovery.service.error.fetch Counter type service: Name of the service being watched is_sidecar: Whether or not the service is a sidecar proxy Incremented every time there is an error while attempting to fetch service definition from consul quorum It is recommended to raise alert if this metric has non-zero value. Check logs from catalog subsystem for details on the error. catalog.discovery.service.noop Counter type service: Name of the service being watched is_sidecar: Whether or not the service is a sidecar proxy Incremented every time the service watcher returns without updates. catalog.discovery.service.updated Counter type service: Name of the service being watched is_sidecar: Whether or not the service is a sidecar proxy Incremented every time the watched service is updated in catalog.","title":"Service Discovery Metrics"},{"location":"observability/#tls-discovery-metrics","text":"catalog.tls.loop Counter type No tags Incremented on every iteration of the TLS certificate watcher loop. A rapidly increasing value might indicate a flapping consul quorum. catalog.tls.error.fetch Counter type No tags Incremented every time there is an error while attempting to fetch TLS certificates It is recommended to raise alert if this metric has a non-zero value. Check logs from catalog subsystem for details on error. catalog.tls.noop Counter type No tags Incremented every time the TLS watcher returns without updates. catalog.tls.updated Counter type No tags Incremented every time the TLS certificate is updated.","title":"TLS Discovery Metrics"},{"location":"observability/#xds-server-metrics","text":"discovery.sync.loop Counter type No tags Incremented on every iteration of configuration synchronization loop discovery.cluster.update Counter type cluster: Name of the cluster with updates Incremented every time there is an update available in a cluster discovery.tls.update Counter type No tags Incremented every time there is an updated available for leaf certificates discovery.cluster.cleanup Counter type No tags Incremented every time a cluster is removed from configuration discovery.cluster.flush Counter type No tags Incremented on periodic configuration flush discovery.cluster.batch_size Gauge type No tags Represents the number of clusters pushed down to the XDS server in an update discovery.cluster.error.flush Counter type No tags Incremented every time an error is encountered trying to push updates to the XDS server discovery.cache.put_ns Gauge type No tags Number of nanoseconds taken to push the updated to XDS server discovery.cache.put.clusters Gauge type No tags Number of cluster entries pushed to XDS server discovery.cache.put.endpoints Gauge type No tags Number of endpoint entries pushed to XDS server discovery.cache.put.routes Gauge type No tags Number of route entries pushed to XDS server discovery.cache.put.listener Gauge type No tags Number of listener entries pushed to XDS server","title":"XDS Server Metrics"},{"location":"route-discovery/","text":"Route Discovery \u00b6 In order to route the traffic to internal services you need to add a tag and some metadata to the service definition before Flightpath can identify it as a valid target. Tag the service with in-flightpath Add metadata flightpath-route-main = the-domain.tld/path and you should be able to access the service on http://thedomain.tld/path Info Flightpath can route traffic to any service. It does not matter if the service has connect sidecar or not, if a service is registered in consul catalog with proper tag and metadata Flightpath can route traffic to it. Flightpath watches consul catalog for services tagged with in-flightpath tag. A service with this tag means it is expected to receive traffic from edge. After discovering the services Flightpath looks for service metadata. Any metadata attribute that starts with flightpath-route- is used for routing configuration. Tip Flightpath only cares about the flightpath-route prefix on metadata key. You can configure as many routes as you want simply by adding more meta attributes with this prefix. For example one service can have flightpath-route-main , flightpath-route-path-prefix , flightpath-route-only-auth to configure three different routes with different domains and paths. The value of a matching attribute must adhere to one of the following forms: domain.tld If the value is a fully qualified domain name then all the requests for this domain are routed to the service /path If the value starts with a forward slash / then it is assumed to be a path based match. In this case the domain is set to wildcard, e.g. every request to /path will be routed to the service regardless of the domain. domain.tld/path Only the requests to specified path on specified domain are routed to the service. domain.tld/path-prefix/ , /path-prefix/ or /path-prefix/* If the value has / or * as suffix it is assumed to be a prefix based match. In this case every request that matches the path prefix will be routed to the service, e.g. domain.tld/path-prefix/one/two or */path-prefix/one/two/three if the domain is omitted.","title":"Route Discovery"},{"location":"route-discovery/#route-discovery","text":"In order to route the traffic to internal services you need to add a tag and some metadata to the service definition before Flightpath can identify it as a valid target. Tag the service with in-flightpath Add metadata flightpath-route-main = the-domain.tld/path and you should be able to access the service on http://thedomain.tld/path Info Flightpath can route traffic to any service. It does not matter if the service has connect sidecar or not, if a service is registered in consul catalog with proper tag and metadata Flightpath can route traffic to it. Flightpath watches consul catalog for services tagged with in-flightpath tag. A service with this tag means it is expected to receive traffic from edge. After discovering the services Flightpath looks for service metadata. Any metadata attribute that starts with flightpath-route- is used for routing configuration. Tip Flightpath only cares about the flightpath-route prefix on metadata key. You can configure as many routes as you want simply by adding more meta attributes with this prefix. For example one service can have flightpath-route-main , flightpath-route-path-prefix , flightpath-route-only-auth to configure three different routes with different domains and paths. The value of a matching attribute must adhere to one of the following forms: domain.tld If the value is a fully qualified domain name then all the requests for this domain are routed to the service /path If the value starts with a forward slash / then it is assumed to be a path based match. In this case the domain is set to wildcard, e.g. every request to /path will be routed to the service regardless of the domain. domain.tld/path Only the requests to specified path on specified domain are routed to the service. domain.tld/path-prefix/ , /path-prefix/ or /path-prefix/* If the value has / or * as suffix it is assumed to be a prefix based match. In this case every request that matches the path prefix will be routed to the service, e.g. domain.tld/path-prefix/one/two or */path-prefix/one/two/three if the domain is omitted.","title":"Route Discovery"}]}